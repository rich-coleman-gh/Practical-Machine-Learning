,dtlogintime
,offline_time
,lead(dtlogintime) OVER (
PARTITION BY vuin ORDER BY dtlogintime
) AS next_match_time
,datediff(ss, dtlogintime, offline_time) / 60.0 AS session_length
,iofflinetype
,lag(iofflinetype) OVER (
PARTITION BY vuin ORDER BY dtlogintime
) AS prev_iofflinetype
,CASE
WHEN ilevel < 15
THEN '<15'
WHEN ilevel >= 15
THEN '>=15'
END AS level_type
FROM (
SELECT a.vUin
,b.offline_time
,b.iofflinetype
,b.dtlogintime
,max(a.ilevel) AS ilevel
FROM (
SELECT a.vuin
,a.dteventtime AS offline_time
,iofflinetype
,dtlogintime
,CASE
WHEN min(ilevel) IS NULL AND rank() OVER (
PARTITION BY a.vUIn ORDER BY dtlogintime
) = 1
THEN 1
ELSE min(ilevel)
END AS ilevel
FROM tlog.offline a
LEFT JOIN tlog.gamedetail b
ON a.vuin = b.vuin AND b.dtgamestarttime BETWEEN a.dtlogintime AND a.dteventtime
WHERE DATE (dtlogintime) < DATE (now()) - 1 AND a.vuin <> '0' AND a.vuin IS NOT NULL AND a.vuin IN (
SELECT vuin
FROM tlog.gamedetail
GROUP BY 1
HAVING min(DATE (dtgamestarttime)) >= '2015-01-10'
)
GROUP BY 1
,2
,3
,4
) a
JOIN (
SELECT a.vuin
,a.dteventtime AS offline_time
,iofflinetype
,dtlogintime
,CASE
WHEN min(ilevel) IS NULL AND rank() OVER (
PARTITION BY a.vUIn ORDER BY dtlogintime
) = 1
THEN 1
ELSE min(ilevel)
END AS ilevel
FROM tlog.offline a
LEFT JOIN tlog.gamedetail b
ON a.vuin = b.vuin AND b.dtgamestarttime BETWEEN a.dtlogintime AND a.dteventtime
WHERE DATE (dtlogintime) < DATE (now()) - 1 AND a.vuin <> '0' AND a.vuin IS NOT NULL AND a.vuin IN (
SELECT vuin
FROM tlog.gamedetail
GROUP BY 1
HAVING min(DATE (dtgamestarttime)) >= '2015-01-10'
)
GROUP BY 1
,2
,3
,4
) b
ON a.vUIn = b.vUIn AND a.offline_time <= b.offline_time
GROUP BY 1
,2
,3
,4
) a
) b
WHERE iofflinetype IN (100, 101)
) a
WHERE (iofflinetype = 100 AND lsg_reconnect_flag = 0) and level_type = '<15'
GROUP BY 1
,2
,3
ORDER BY 1
,2
,3
")
describe(dfAllSession)
View(dfAllSession)
library(splines)
bsBasis <- bs(training$age,df=3)
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y = spam$type,p=.6,list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
M <- abs(cor(training[,58]))
M <- abs(cor(training[,-58]))
diag(M) <- 0
which(M > .8, arr.ind=T)
names(spam)[c(34,32)]
plot(spam[,34],spam[,32])
smallSpam <- spam[,c(34,32)]
prComp <- prcomp(smallSpam)
plot(prComp$x[,1],prComp$x[,2])
typeColor <- ((spam$type="spam"*1 + 1))
typeColor <- ((spam$type="spam")*1 + 1)
typeColor <- ((spam$type=="spam")*1 + 1)
prComp <- prComp(log10(spam[,-58]+1))
prComp <- prcomp(log10(spam[,-58]+1))
plot(prComp$x[,1],prComp$x[,2],col = typeColor,xlab = "PC1",ylab="PC2")
typeColor <- ((spam$type=="spam")*1 + 1)
prComp <- prcomp(log10(spam[,-58]+1))
plot(prComp$x[,1],prComp$x[,2],col = typeColor,xlab = "PC1",ylab="PC2")
preProc <- prePRocess(log10(spam[,-58]+1),method="pca",pcaComp=2)
preProc <- prePRocess(log10(spam[,-58]+1),method="pca",pcaComp=2)
spamPC <- predict(preProc,log10(spam[,-58]+1))
preProc <- preProcess(log10(spam[,-58]+1),method="pca",pcaComp=2)
spamPC <- predict(preProc,log10(spam[,-58]+1))
plot(spamPC[,1],spamPC[,2],col=typeColor)
library(ISLR)
library(ggplot2)
library(caret)
data(wage)
data(Wage)
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage,p=.6,list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
featurePlot(x=training,y=training$wage,plot="pairs")
modFit <- train(wage ~ age + jobclass + education,method="lm",data=training)
finMod <- modFit$finalModel
finMod
modFit
plot(finMod,1)
qplot(finMod$fitted,finMod$residuals,color=race)
qplot(data=training,finMod$fitted,finMod$residuals,color=race)
plot(finMod$)
plot(finMod$residuals)
plot(finMod$residuals,pch=19)
plot(finMod$residuals)
library(Hmisc)
library(RODBC)
conn <- odbcConnect("gatR")
df <- sqlQuery(conn,"
select *
from sp.co_69_rich_type2
")
summary(df)
sapply(df,class)
df$pct_time_private_group_total_duration_type2 <- NULL
df$pct_time_private_group_private_duration_type2 <- NULL
df$pct_time_private_solo_total_duration_type2 <- NULL
df$pct_time_private_solo_private_duration_type2 <- NULL
df$vUin <- NULL
library(mice)
set.seed(42157)
### we need to partition by target var
dp <- createDataPartition(df, p = .1)
library(caret)
dp <- createDataPartition(df, p = .1)
?createDataPartition
dp <- createDataPartition(df, p = .1)
data(oil)
createDataPartition(oilType, 2)
head(oilType)
data(oil)
x <- createDataPartition(oilType, 2)
head(x)
y <- oilType[x]
y <- oilType[x,]
x <- NULL
y <- NULL
inTrain <- createDataPartition(df$number_friends_type2, p = .1)
dfSub <- df[inTrain,]
training <- df[inTrain,]
inTrain <- createDataPartition(df$number_friends_type2, p = .1,list=FALSE)
training <- df[inTrain,]
head(training)
imp <- mice(training,m=1)
head(imp)
imp
imp$imp
head(imp$imp)
imp$imp$pct_time_not_in_party_type2
imp$imp$max_party_size_type2
imp$imp$lsg_reason_6_count_type2
dfImp <- complete(imp,"long")
View(dfImp)
dfImp <- complete(imp,"long",inc=TRUE)
View(training)
dfImp <- complete(imp,"long")
View(dfImp)
View(dfImp)
library(sqldf)
sqldf("select imp
,count(*)
from dfImp")
sqldf("select .imp
,count(*)
from dfImp")
sqldf("select '.imp'
,count(*)
from dfImp")
sqldf("select '.imp'
,count(*)
from dfImp")
library(ggplot2)
i <- 1
ggplot() +
geom_density(data=df,aes(x=df[,i]),color='Raw') +
geom_density(data=dfImp,aes(x=dfImp[,i+2]),color='Impute')
ggplot() +
geom_density(data=df,aes(x=df[,i]),color="Raw") +
geom_density(data=dfImp,aes(x=dfImp[,i+2]),color="Impute")
ggplot() +
geom_density(data=df,aes(x=df[,i])) +
geom_density(data=dfImp,aes(x=dfImp[,i+2]))
ggplot() +
geom_density(data=df,aes(x=df[,i]),size=1) +
geom_density(data=dfImp,aes(x=dfImp[,i+2]),size=1)
ggplot() +
geom_density(data=df,aes(x=df[,i]),size=1,alpha=.5) +
geom_density(data=dfImp,aes(x=dfImp[,i+2]),size=1,alpha=.5)
ggplot() +
geom_density(data=df,aes(x=df[,i],color='Raw'),size=1,alpha=.5) +
geom_density(data=dfImp,aes(x=dfImp[,i+2],color='Imputed'),size=1,alpha=.5)
pdf("temp1.pdf")
for (i in 1:nrow(df)) {
ggplot() +
geom_density(data=df,aes(x=df[,i],color='Raw'),size=1,alpha=.5) +
geom_density(data=dfImp,aes(x=dfImp[,i+2],color='Imputed'),size=1,alpha=.5)
}
dev.off()
dev.off()
dev.off()
pdf("temp1.pdf")
for (i in 1:nrow(df)) {
ggplot() +
geom_density(data=df,aes(x=df[,i],color='Raw'),size=1,alpha=.5) +
geom_density(data=dfImp,aes(x=dfImp[,i+2],color='Imputed'),size=1,alpha=.5) +
labs(x=colnames(df[i]),color='Data Source')
}
dev.off()
i
dev.off()
pdf("temp1.pdf")
for (i in 1:nrow(dfImp)) {
ggplot() +
geom_density(data=df,aes(x=df[,i],color='Raw'),size=1,alpha=.5) +
geom_density(data=dfImp,aes(x=dfImp[,i+2],color='Imputed'),size=1,alpha=.5) +
labs(x=colnames(df[i]),color='Data Source')
}
dev.off()
pdf("temp1.pdf")
for (i in 1:nrow(df)) {
ggplot() +
geom_density(data=df,aes(x=df[,i],color='Raw'),size=1,alpha=.5) +
geom_density(data=dfImp,aes(x=dfImp[,i+2],color='Imputed'),size=1,alpha=.5) +
labs(x=colnames(df[i]),color='Data Source')
}
dev.off()
pdf("temp1.pdf")
for (i in 1:nrow(df)) {
ggplot() +
geom_density(data=df,aes(x=df[,i],color='Raw'),size=1,alpha=.5) +
geom_density(data=dfImp,aes(x=dfImp[,i+2],color='Imputed'),size=1,alpha=.5) +
labs(x=colnames(df[,i]),color='Data Source')
}
dev.off()
i <- 1
colnames(df[i])
colnames(df[,i])
df[,i]
ggplot() +
geom_density(data=df,aes(x=df[,i],color='Raw'),size=1,alpha=.5) +
geom_density(data=dfImp,aes(x=dfImp[,i+2],color='Imputed'),size=1,alpha=.5) +
labs(x=colnames(df[i]),color='Data Source')
i <- i + 1
ggplot() +
geom_density(data=df,aes(x=df[,i],color='Raw'),size=1,alpha=.5) +
geom_density(data=dfImp,aes(x=dfImp[,i+2],color='Imputed'),size=1,alpha=.5) +
labs(x=colnames(df[i]),color='Data Source')
ggplot() +
geom_density(data=df,aes(x=df[,i],color='Raw',alpha=.5),size=1) +
geom_density(data=dfImp,aes(x=dfImp[,i+2],color='Imputed',alpha=.5),size=1) +
labs(x=colnames(df[i]),color='Data Source')
View(dfImp)
dfImp[,c(".imp",".id") <- NULL
]
dfImp[,c(".imp",".id")] <- NULL
dfImp[,1] <- NULL
View(dfImp)
dfImp$.id <- NULL
pdf("temp1.pdf")
for (i in 1:nrow(df)) {
ggplot() +
geom_density(data=df,aes(x=df[,i],color='Raw'),size=1,alpha=.5) +
geom_density(data=dfImp,aes(x=dfImp[,i],color='Imputed'),size=1,alpha=.5) +
labs(x=colnames(df[i]),color='Data Source')
}
dev.off()
i
ggplot() +
geom_density(data=df,aes(x=df[,i],color='Raw'),size=1,alpha=.5) +
geom_density(data=dfImp,aes(x=dfImp[,i],color='Imputed'),size=1,alpha=.5) +
labs(x=colnames(df[i]),color='Data Source')
i <- 40
ggplot() +
geom_density(data=df,aes(x=df[,i],color='Raw'),size=1,alpha=.5) +
geom_density(data=dfImp,aes(x=dfImp[,i],color='Imputed'),size=1,alpha=.5) +
labs(x=colnames(df[i]),color='Data Source')
nrow(df)
dev.off()
dev.off()
pdf("temp1.pdf")
for (i in 1:ncol(df)) {
ggplot() +
geom_density(data=df,aes(x=df[,i],color='Raw'),size=1,alpha=.5) +
geom_density(data=dfImp,aes(x=dfImp[,i],color='Imputed'),size=1,alpha=.5) +
labs(x=colnames(df[i]),color='Data Source')
}
dev.off()
dev.off()
pdf("temp1.pdf")
for (i in 1:ncol(df)) {
ggplot() +
geom_density(data=df,aes(x=df[,i],color='Raw'),size=1,alpha=.5) +
geom_density(data=dfImp,aes(x=dfImp[,i],color='Imputed'),size=1,alpha=.5) +
labs(x=colnames(df[i]),color='Data Source')
}
dev.off()
ggplot() +
geom_density(data=df,aes(x=df[,i],color='Raw'),size=1,alpha=.5) +
geom_density(data=dfImp,aes(x=dfImp[,i],color='Imputed'),size=1,alpha=.5) +
labs(x=colnames(df[i]),color='Data Source')
pdf("temp1.pdf")
for (i in 1:ncol(df)) {
ggplot() +
geom_density(data=df,aes(x=df[,i],color='Raw'),size=1,alpha=.5) +
geom_density(data=dfImp,aes(x=dfImp[,i],color='Imputed'),size=1,alpha=.5) +
labs(x=colnames(df[i]),color='Data Source')
}
dev.off()
i <- 1
ggplot() +
geom_density(data=df,aes(x=df[,i],color='Raw'),size=1,alpha=.5) +
geom_density(data=dfImp,aes(x=dfImp[,i],color='Imputed'),size=1,alpha=.5) +
labs(x=colnames(df[i]),color='Data Source')
i <- i + 1
ggplot() +
geom_density(data=df,aes(x=df[,i],color='Raw'),size=1,alpha=.5) +
geom_density(data=dfImp,aes(x=dfImp[,i],color='Imputed'),size=1,alpha=.5) +
labs(x=colnames(df[i]),color='Data Source')
i <- i + 1
ggplot() +
geom_density(data=df,aes(x=df[,i],color='Raw'),size=1,alpha=.5) +
geom_density(data=dfImp,aes(x=dfImp[,i],color='Imputed'),size=1,alpha=.5) +
labs(x=colnames(df[i]),color='Data Source')
i <- i + 1
ggplot() +
geom_density(data=df,aes(x=df[,i],color='Raw'),size=1,alpha=.5) +
geom_density(data=dfImp,aes(x=dfImp[,i],color='Imputed'),size=1,alpha=.5) +
labs(x=colnames(df[i]),color='Data Source')
i <- i + 1
ggplot() +
geom_density(data=df,aes(x=df[,i],color='Raw'),size=1,alpha=.5) +
geom_density(data=dfImp,aes(x=dfImp[,i],color='Imputed'),size=1,alpha=.5) +
labs(x=colnames(df[i]),color='Data Source')
i <- i + 1
ggplot() +
geom_density(data=df,aes(x=df[,i],color='Raw'),size=1,alpha=.5) +
geom_density(data=dfImp,aes(x=dfImp[,i],color='Imputed'),size=1,alpha=.5) +
labs(x=colnames(df[i]),color='Data Source')
View(dfImp)
dev.off()
getwd
getwd()
pdf("temp1.pdf")
for (i in 1:ncol(df)) {
p1 <- ggplot() +
geom_density(data=df,aes(x=df[,i],color='Raw'),size=1,alpha=.5) +
geom_density(data=dfImp,aes(x=dfImp[,i],color='Imputed'),size=1,alpha=.5) +
labs(x=colnames(df[i]),color='Data Source')
p1
}
dev.off()
pdf("temp1.pdf")
for (i in 1:2) {
p1 <- ggplot() +
geom_density(data=df,aes(x=df[,i],color='Raw'),size=1,alpha=.5) +
geom_density(data=dfImp,aes(x=dfImp[,i],color='Imputed'),size=1,alpha=.5) +
labs(x=colnames(df[i]),color='Data Source')
p1
}
dev.off()
dev.off()
dev.off()
dev.off()
pdf("temp1.pdf")
for (i in 1:2) {
p <- ggplot() +
geom_density(data=df,aes(x=df[,i],color='Raw'),size=1,alpha=.5) +
geom_density(data=dfImp,aes(x=dfImp[,i],color='Imputed'),size=1,alpha=.5) +
labs(x=colnames(df[i]),color='Data Source')
print(p)
}
dev.off()
pdf("temp1.pdf")
for (i in 1:ncol(df)) {
p <- ggplot() +
geom_density(data=df,aes(x=df[,i],color='Raw'),size=1,alpha=.5) +
geom_density(data=dfImp,aes(x=dfImp[,i],color='Imputed'),size=1,alpha=.5) +
labs(x=colnames(df[i]),color='Data Source')
print(p)
}
dev.off()
test <- df[-inTrain,]
hist(df[,1])
df[,1] <- df[df[,1]< 4,]
setwd("C:/Users/rcoleman/Documents/GitHub/Coursera/Practical Machine Learning/Course Project")
dfTraining <- read.csv("pml-training.csv")
dfTesting <- read.csv("pml-testing.csv")```
dfTesting <- read.csv("pml-testing.csv"")
""
dfTesting <- read.csv("pml-testing.csv")
head(dfTraining)
head(dfTesting)
library(Hmisc)
View(dfTesting)
data(iris)
library(ggplot2)
names(iris)
tables(iris$Species)
table(iris$Species)
library(caret)
inTrain <- createDataPartition(y=iris$Species,p=.7,list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training)
dim(testing)
qplot(Petal.Width,Sepal.Width,color=Species,data=training)
model <- train(Species ~ .,method="rpart",data=training)
print(model$finalModel)
plot(model$finalModel,uniform=TRUE,main="Classification Tree")
test(model$finalModel,use.n = TRUE, all=TRUE,cex=.8)
text(model$finalModel,use.n = TRUE, all=TRUE,cex=.8)
library(rattle)
install.packages("rattle")
library(rattle)
library(rattle)
fancyRpartPlot(model$finalModel)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(model$finalModel)
predict(model,newdata = testing)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(ozone,package="ElemStatLearn")
ozone <- ozone[order(ozone$ozone),]
head(ozone)
ll <-matrix(NA,nrow=10,ncol = 155)
ll <-matrix(NA,nrow=10,ncol = 155)
for (i in 1:10) {
ss <- sample(1:dim(ozone)[1],replace=T)
ozone0 <- ozone[ss,]
ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess(temperature ~ ozone , data=ozone,span=.2)
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
predictors <- data.frame(ozone = ozone$ozone)
temperature <- ozone$temperature
library(iris)
library(ggplot2)
data(iris)
library(ggplot2)
library(caret)
inTrain <- createDataPartition(y = iris$Species,p=.7,list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
model <- train(iris$Species ~ .,method="rf",prox=TRUE,data=training)
model <- train(Species ~ .,method="rf",prox=TRUE,data=training)
model
print(model)
irisP <- classCenter(training[,c(3,4)],training$Species,model$finalModel$proximity)
irisP <- as.data.frame(irisP)
iris$Species <- rownames(irisP)
p <- ggplot(data = training, Petal.Width,Petal.Length,col=Species)
p <- ggplot(data = training, training$Petal.Width,training$Petal.Length,col=Species)
p <- ggplot(data = training, aes(training$Petal.Width,training$Petal.Length),col=Species)
p + geom_point(size=5,shape=4,data=irisP)
p <- ggplot(data = training, aes(training$Petal.Width,training$Petal.Length),color=Species)
p + geom_point(size=5,shape=4,data=irisP)
p
p <- ggplot(data = training, aes(training$Petal.Width,training$Petal.Length),color=Species)
p + geom_point(size=5,shape=4,data=irisP)
p <- ggplot(data = training, aes(training$Petal.Width,training$Petal.Length,color=Species)
p + geom_point(size=5,shape=4,data=irisP)
p <- ggplot(data = training, aes(training$Petal.Width,training$Petal.Length,color=Species)
p <- ggplot(data = training, aes(training$Petal.Width,training$Petal.Length,color=Species))
p <- ggplot(data = training, aes(training$Petal.Width,training$Petal.Length,color=Species))
p + geom_point(size=5,shape=4,data=irisP)
p <- ggplot(data = training, aes(training$Petal.Width,training$Petal.Length,color=training$Species))
p + geom_point(size=5,shape=4,data=irisP)
pred <- predict(model,testing)
